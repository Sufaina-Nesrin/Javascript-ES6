Private and protected properties and methods
.............................................

One of the most important principles of object oriented programming – delimiting internal interface from 
the external one.

That is “a must” practice in developing anything more complex than a “hello world” app.

To understand this, let’s break away from development and turn our eyes into the real world.

Usually, devices that we’re using are quite complex. But delimiting the internal interface from the external 
one allows to use them without problems.

A real-life example
For instance, a coffee machine. Simple from outside: a button, a display, a few holes…And, surely, 
the result – great coffee! :)

But inside… 
A lot of details. But we can use it without knowing anything.

Coffee machines are quite reliable, aren’t they? We can use one for years,
 and only if something goes wrong – bring it for repairs.

The secret of reliability and simplicity of a coffee machine – all details are well-tuned and hidden inside.

If we remove the protective cover from the coffee machine, then using it will be much more complex
 (where to press?), and dangerous (it can electrocute).

As we’ll see, in programming objects are like coffee machines.

But in order to hide inner details, we’ll use not a protective cover,
 but rather special syntax of the language and conventions.

 In object-oriented programming, properties and methods are split into two groups:

Internal interface – methods and properties, accessible from other methods of the class, but not from the outside.
External interface – methods and properties, accessible also from outside the class.

If we continue the analogy with the coffee machine – what’s hidden inside:
 a boiler tube, heating element, and so on – is its internal interface.

An internal interface is used for the object to work, its details use each other.
 For instance, a boiler tube is attached to the heating element.

But from the outside a coffee machine is closed by the protective cover,
 so that no one can reach those. Details are hidden and inaccessible.
  We can use its features via the external interface.

So, all we need to use an object is to know its external interface. 
We may be completely unaware how it works inside, and that’s great.

That was a general introduction.

In JavaScript, there are two types of object fields (properties and methods):

Public: accessible from anywhere. They comprise the external interface. 
Until now we were only using public properties and methods.

Private: accessible only from inside the class. These are for the internal interface.

In many other languages there also exist “protected” fields: accessible only from inside the class 
and those extending it (like private, but plus access from inheriting classes).
They are also useful for the internal interface. They are in a sense more widespread than private ones,
because we usually want inheriting classes to gain access to them.

::CREDITS TO:-https://javascript.info/private-protected-properties-methods